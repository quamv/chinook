// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using chinook_lib_netstandard_ef.Model;

namespace chinook_lib_netstandard_ef.Migrations
{
    [DbContext(typeof(ChinookDbContext))]
    partial class ChinookDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932");

            modelBuilder.Entity("chinook_lib_netstandard_ef.Model.album", b =>
                {
                    b.Property<int>("AlbumId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ArtistId");

                    b.Property<string>("Title");

                    b.HasKey("AlbumId");

                    b.HasIndex("ArtistId");

                    b.ToTable("albums");
                });

            modelBuilder.Entity("chinook_lib_netstandard_ef.Model.artist", b =>
                {
                    b.Property<int>("ArtistId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ArtistId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("artists");
                });

            modelBuilder.Entity("chinook_lib_netstandard_ef.Model.genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("GenreId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("genres");
                });

            modelBuilder.Entity("chinook_lib_netstandard_ef.Model.media_type", b =>
                {
                    b.Property<int>("Media_TypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Media_TypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("media_types");
                });

            modelBuilder.Entity("chinook_lib_netstandard_ef.Model.playlist", b =>
                {
                    b.Property<int>("PlaylistId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("PlaylistId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("playlists");
                });

            modelBuilder.Entity("chinook_lib_netstandard_ef.Model.playlist_track", b =>
                {
                    b.Property<int>("PlaylistId");

                    b.Property<int>("TrackId");

                    b.HasKey("PlaylistId", "TrackId");

                    b.HasIndex("TrackId");

                    b.ToTable("playlist_tracks");
                });

            modelBuilder.Entity("chinook_lib_netstandard_ef.Model.track", b =>
                {
                    b.Property<int>("TrackId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AlbumId");

                    b.Property<int>("Bytes");

                    b.Property<string>("Composer");

                    b.Property<int>("GenreId");

                    b.Property<int>("MediaTypeId");

                    b.Property<int>("Milliseconds");

                    b.Property<string>("Name");

                    b.Property<float>("UnitPrice");

                    b.HasKey("TrackId");

                    b.HasIndex("AlbumId");

                    b.HasIndex("GenreId");

                    b.HasIndex("MediaTypeId");

                    b.ToTable("tracks");
                });

            modelBuilder.Entity("chinook_lib_netstandard_ef.Model.album", b =>
                {
                    b.HasOne("chinook_lib_netstandard_ef.Model.artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("chinook_lib_netstandard_ef.Model.playlist_track", b =>
                {
                    b.HasOne("chinook_lib_netstandard_ef.Model.playlist", "playlist")
                        .WithMany("tracks")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("chinook_lib_netstandard_ef.Model.track", "track")
                        .WithMany()
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("chinook_lib_netstandard_ef.Model.track", b =>
                {
                    b.HasOne("chinook_lib_netstandard_ef.Model.album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("chinook_lib_netstandard_ef.Model.genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("chinook_lib_netstandard_ef.Model.media_type", "MediaType")
                        .WithMany()
                        .HasForeignKey("MediaTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
