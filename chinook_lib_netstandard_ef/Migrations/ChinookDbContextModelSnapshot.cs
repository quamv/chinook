// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using chinook_lib_netstandard_ef.Model;

namespace chinook_lib_netstandard_ef.Migrations
{
    [DbContext(typeof(ChinookDbContext))]
    partial class ChinookDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932");

            modelBuilder.Entity("chinook_lib_netstandard_ef.Model.genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("GenreId");

                    b.ToTable("genres");
                });

            modelBuilder.Entity("chinook_lib_netstandard_ef.Model.media_type", b =>
                {
                    b.Property<int>("Media_TypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Media_TypeId");

                    b.ToTable("media_types");
                });

            modelBuilder.Entity("chinook_lib_netstandard_ef.Model.playlist", b =>
                {
                    b.Property<int>("PlaylistId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("PlaylistId");

                    b.ToTable("playlists");
                });

            modelBuilder.Entity("chinook_lib_netstandard_ef.Model.playlist_track", b =>
                {
                    b.Property<int>("PlaylistId");

                    b.Property<int>("TrackId");

                    b.HasKey("PlaylistId", "TrackId");

                    b.ToTable("playlist_track");
                });

            modelBuilder.Entity("chinook_lib_netstandard_ef.Model.playlist_track", b =>
                {
                    b.HasOne("chinook_lib_netstandard_ef.Model.playlist")
                        .WithMany("tracks")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
